// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Resume        Resume[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Resume {
    id            String         @id @default(cuid())
    userId        String
    firstName     String         @default("")
    lastName      String         @default("")
    email         String?        @default("")
    personalLinks PersonalLink[]

    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    Section Section[]

    @@index([userId])
}

model PersonalLink {
    id       String           @id @default(cuid())
    resumeId String
    label    String
    url      String
    type     PersonalLinkType
    resume   Resume           @relation(fields: [resumeId], references: [id], onDelete: Cascade)

    @@index([resumeId])
}

enum PersonalLinkType {
    github
    linkedin
    twitter
    facebook
    instagram
    youtube
    twitch
    website
    discord
    other
}

model Section {
    id       String        @id @default(cuid())
    resumeId String
    title    String        @default("")
    order    Int
    items    SectionItem[]
    start    DateTime?
    end      DateTime?
    company  String?

    resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

    @@index([resumeId])
}

model SectionItem {
    id             String    @id @default(cuid())
    sectionId      String
    description    String    @default("")
    rawDescription String    @default("")
    order          Int
    date           DateTime?

    section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

    @@index([sectionId])
}
